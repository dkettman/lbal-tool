import pprint
import json
from collections import ChainMap

"""
    Workflow thought process:
    - Grab grouping data from JSON file in the unpacked PAK file and populate objects
      - JSON files pulled from PAK are the baseline for data. The data extracted from the wiki and put in the sqlite3
        database is user generated, not dev generated. We will use it for the Description field only. 
    - Match up the description field in the sqlite3 database and populate field in objects
    - Search Symbol objects for provided name in both the 'id' and 'name' fields
    - If found, provide what groups symbol is in.
    
    Future features:
    - Be able to see what a symbol destroys or what destroys your provided symbol
      - Ex: "What destroys a banana?" and "What does the toddler destroy?"
    - Incorporate Items and Essences
    
    
    Q's to A:
    - Better to do an array of Symbol objects or a dict so I can look up by id? What search methods will work?
      - data types I found:
        - Sets -- All keys (id) will be unique and being able to do a union where on the groups field would be nice
        - ChainMaps -- Maybe?? Looked similar to sets sort of but probably more complex than I need
        - Dict -- If I could search based on the value easily, that could work too.
    - Do I just build it all in sqlite and do my searches that way? I will need to search by Id, Name, and contents of Groups
      - select * from symbols where Name = "Pair of Boobies"
      - select * from symbols where Groups contains "boobie"
      - select * from symbols where Id = "boobies"
      - Think keeping it all in Python would work better/give better learning opportunity.
      
"""

# Dict of Symbol objects we will use for lookups
symbols = ChainMap()


# CLASS DEFINITIONS
class JsonData:
    """Represents data pulled from the JSON files that are generated by unpacking the LBAL pack files."""


class SQLData:
    """Represents data pulled from the sqlite database generated by the wiki. This class will only be used for a
    reference based on the extracted data from the PAK files."""


class Symbol:
    """Class for the symbols"""

    def __init__(self, id, groups, rarity, value):
        self.id = id
        self.value = value
        self.groups = groups
        self.rarity = rarity

    def __str__(self):
        return f'ID: {self.id} - Groups: {self.groups}'

    def __repr__(self):
        return f'Symbol("{self.id}","{self.groups}")'


fobj = open("json/Symbols - JSON.json")
foo = json.load(fobj)

# Build classes from files

json_files = ["json/Symbols - JSON.json"]

for file in json_files:
    fobj = open(file)
    objs = json.load(fobj)

    for obj in objs:
        # print("ID: {}, Value: {}, Groups: {}, Rarity: {}".format(obj,
        #                                                         objs[obj]["value"],
        #                                                         objs[obj]["groups"],
        #                                                         objs[obj]["rarity"]))
        print("Doing a thing with {}".format(obj))
        dict_symbols.
        dict_symbols[obj] = (Symbol(obj,
                                  objs[obj]["value"],
                                  objs[obj]["groups"],
                                  objs[obj]["rarity"]))
        print(dict_symbols[obj])
